<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>slc3a2</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on slc3a2</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 03 Apr 2025 11:18:19 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ClashX Pro 自定义域名解析失败</title>
      <link>http://localhost:1313/blogs/clashx-pro-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%A4%B1%E8%B4%A5/</link>
      <pubDate>Thu, 03 Apr 2025 11:18:19 +0800</pubDate>
      <guid>http://localhost:1313/blogs/clashx-pro-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E5%A4%B1%E8%B4%A5/</guid>
      <description>&lt;h2 id=&#34;应用介绍&#34;&gt;应用介绍&lt;/h2&gt;
&lt;p&gt;ClashX Pro 是 MacOS 系统即苹果电脑系统下的代理软件客户端，功能强大且支持多种代理协议，如 Shadowsocks(SS)、ShadowsocksR(SSR)、Socks、Snell、V2Ray、Trojan 等代理协议&lt;/p&gt;</description>
    </item>
    <item>
      <title>我的应用</title>
      <link>http://localhost:1313/apps/</link>
      <pubDate>Wed, 07 Feb 2024 13:13:04 +0800</pubDate>
      <guid>http://localhost:1313/apps/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#colora&#34;&gt;Colora - Chrome 扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%85%B3%E7%81%AF&#34;&gt;关灯 - Chrome 扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ohmycookie&#34;&gt;OhMyCookie - Chrome 扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ohmybox&#34;&gt;OhMyBox - Npm 包&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;colora&#34;&gt;Colora&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Colora 是⼀款基于 Chrome 的扩展程序，它⾮常的轻量级、纯粹并且免费的截图美化⼯具，不滥⽤权限、使⽤最原始、恰到好处的技术实现，并且没有任何⼴告。核⼼逻辑只有不到 5 KB，Chrome 扩展商店搜索「Colora」&lt;/p&gt;</description>
    </item>
    <item>
      <title>有意思的命名</title>
      <link>http://localhost:1313/blogs/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%91%BD%E5%90%8D/</link>
      <pubDate>Mon, 27 Nov 2023 18:27:03 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84%E5%91%BD%E5%90%8D/</guid>
      <description>&lt;p&gt;如果有一个布尔变量，来控制某个按钮的显示隐藏，就有两种命名方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;show = 布尔值&lt;/li&gt;
&lt;li&gt;hide = 布尔值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当使用 show 变量时，好像，代码的逻辑更像是在问 “是否要显示按钮？” 如果答案是肯定的（true），就显示按钮；如果是否定的（false），就隐藏按钮。这种逻辑符合人们日常对于 “展示” 事物的思考方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>命题逻辑真值表</title>
      <link>http://localhost:1313/blogs/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9C%9F%E5%80%BC%E8%A1%A8/</link>
      <pubDate>Wed, 11 Oct 2023 18:23:09 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E5%91%BD%E9%A2%98%E9%80%BB%E8%BE%91%E7%9C%9F%E5%80%BC%E8%A1%A8/</guid>
      <description>这篇文章先给出离散数学中命题逻辑真值表，介绍了合取、析取、否定、蕴含、等价运算规则及结果，后分别以具体生活实例对每种运算进行详细说明，并特别指出蕴含运算中逻辑关系与因果关系的区别</description>
    </item>
    <item>
      <title>js 是如何存储数字的</title>
      <link>http://localhost:1313/blogs/js%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E6%95%B0%E5%AD%97%E7%9A%84/</link>
      <pubDate>Wed, 22 Jun 2022 18:06:30 +0800</pubDate>
      <guid>http://localhost:1313/blogs/js%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E6%95%B0%E5%AD%97%E7%9A%84/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;为什么要写这篇博客&#34;&gt;为什么要写这篇博客&lt;/h2&gt;
&lt;p&gt;最近在和同事午饭的时候聊到这个问题。想到了刚接触编程时粗略了解过，但是又没办法讲清楚，所以决定利用这篇博客复习一下。也希望给相关的二进制存储的疑问画上一个句号。&lt;/p&gt;</description>
    </item>
    <item>
      <title>浏览器事件循环</title>
      <link>http://localhost:1313/blogs/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Sun, 06 Mar 2022 10:53:20 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</guid>
      <description>&lt;h2 id=&#34;为什么要总结这个问题&#34;&gt;为什么要总结这个问题&lt;/h2&gt;
&lt;p&gt;这几天和我的同事聊到这个问题，他提出了一些深入的问题，我想了想，也有相同的疑问。真是验证了那句话，了解的越多就发现自己了解的越少！所以被迫研究了下这个问题总结起来。便于以后查看和补充。&lt;/p&gt;</description>
    </item>
    <item>
      <title>从 OSI 七层模型到 TCP</title>
      <link>http://localhost:1313/blogs/%E4%BB%8Eosi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E5%88%B0tcp/</link>
      <pubDate>Tue, 22 Feb 2022 23:15:06 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E4%BB%8Eosi%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%E5%88%B0tcp/</guid>
      <description>&lt;h2 id=&#34;为什么要写这篇博客&#34;&gt;为什么要写这篇博客&lt;/h2&gt;
&lt;p&gt;一个是感觉自己的计算机网络基础薄弱，关于七层模型和 tcp、udp 看过几次了，都不够透彻，知其然不知其所以然。再一个，最近和同事有聊到这个事，感觉自己也说不明白，又意识到很重要，所以决定整理一下，自己感觉自己会了和可以给别人讲明白这个事儿，区别还是很大的啊。就参考资料和自己理解记录一下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>记发布订阅和观察者模式</title>
      <link>http://localhost:1313/blogs/%E8%AE%B0%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%92%8C%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 01 Jun 2021 11:40:03 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E8%AE%B0%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%92%8C%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;发布订阅模式&#34;&gt;发布订阅模式&lt;/h2&gt;
&lt;p&gt;简单来说，需要三个角色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发布者&lt;/li&gt;
&lt;li&gt;事件队列&lt;/li&gt;
&lt;li&gt;订阅者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;发布者&lt;/strong&gt; -&amp;gt; &lt;strong&gt;事件队列&lt;/strong&gt; &amp;lt;=&amp;gt; &lt;strong&gt;订阅者&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一次完整流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;订阅者&lt;/code&gt;向事件队列订阅&lt;code&gt;事件E&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;发布者&lt;/code&gt;向事件队列发布&lt;code&gt;事件E&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;事件队列通知&lt;code&gt;事件E&lt;/code&gt;的所有&lt;code&gt;订阅者&lt;/code&gt;，&lt;code&gt;订阅者&lt;/code&gt;接收&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Event&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;constructor&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 事件队列
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listeners&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 订阅方法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;eventType&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;listener&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listeners&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;eventType&lt;/span&gt;]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listeners&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;eventType&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listeners&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;eventType&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;listener&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// 发布方法
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;emit&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;eventType&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;callbacks&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listeners&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;eventType&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;callbacks&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;callbacks&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;forEach&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Event&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;open&amp;#34;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;emit&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;open&amp;#34;&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;open&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;观察者模式&#34;&gt;观察者模式&lt;/h2&gt;
&lt;p&gt;需要两个角色&lt;/p&gt;</description>
    </item>
    <item>
      <title>旅行者1号</title>
      <link>http://localhost:1313/blogs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/</link>
      <pubDate>Sat, 15 May 2021 21:22:57 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E6%97%85%E8%A1%8C%E8%80%851%E5%8F%B7/</guid>
      <description>&lt;h2 id=&#34;旅行者计划&#34;&gt;旅行者计划&lt;/h2&gt;
&lt;p&gt;30 多年前，美国发起了一项太空计划：&lt;strong&gt;旅行者计划&lt;/strong&gt;。目的是为了探测木星和土星，其中包含&lt;code&gt;旅行者1号&lt;/code&gt;和&lt;code&gt;旅行者2号&lt;/code&gt;，在 1977 年，美国向太空发射了这两颗探测器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>手写代码面试题合集</title>
      <link>http://localhost:1313/blogs/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%E9%9D%A2%E8%AF%95%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Fri, 30 Apr 2021 18:46:45 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81%E9%9D%A2%E8%AF%95%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;持续更新，为了高效率访问，也算自己复习！！把遇到的手写题，抽空都撸了一遍。满满干货，不墨迹，直接上代码。总结道这篇博客里，下次面试前快速过一遍，临阵磨刀～&lt;/p&gt;</description>
    </item>
    <item>
      <title>真睡后收入-以太坊挖矿小记</title>
      <link>http://localhost:1313/blogs/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5gtx1660s%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E5%B0%8F%E8%AE%B0/</link>
      <pubDate>Mon, 05 Apr 2021 10:11:16 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E7%9C%9F%E7%9D%A1%E5%90%8E%E6%94%B6%E5%85%A5gtx1660s%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%8C%96%E7%9F%BF%E5%B0%8F%E8%AE%B0/</guid>
      <description>因论坛帖子对以太坊挖矿产生兴趣，以自身配置为例，介绍了选择矿池、获取地址、使用 PhoenixMiner 和 lolMiner 两款软件开始挖矿的详细步骤，分析收益成本，讲解算力相关知识并附上主流显卡算力表</description>
    </item>
    <item>
      <title>前端面试题总结</title>
      <link>http://localhost:1313/blogs/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 21 Dec 2020 19:06:55 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;!-- [HTML 和 CSS 部分](#HTML和CSS)

- [BFC](#BFC)
- [重排和重绘](#重排和重绘)
- [行内元素特点](#行内元素特点)
- [实现换肤功能](#实现换肤功能)
- [link 和@import 区别](#link和@import区别)
- [为什么要使用 css 预处理语言](#为什么要使用css预处理语言)
- [src 和 href 的区别](#src和href的区别)

[js 部分](#js部分)

- [箭头函数和普通函数区别](#箭头函数和普通函数区别)

- [script 的 defer 和 async 属性区别](#script的defer和async属性区别)
- [深拷贝](#深拷贝)
- [函数防抖和节流](#函数防抖和节流)
- [继承](#继承)
- [跨域](#跨域)
- [数组方法](#数组方法)
- [字符串方法](#字符串方法)
- [js 垃圾回收机制](#js垃圾回收机制)
- [类型检测](#类型检测)
- [valueOf 和 toString](#valueOf和toString)
- [proxy 和 reflect](#proxy和reflect)
- [requestAnimationFrame](#requestAnimationFrame)
- [事件循环](#事件循环)
- [迭代器和生成器](#迭代器和生成器)
- [事件委托与冒泡和捕获](#事件委托与冒泡和捕获)
- [实现 instanceof](#实现instanceof)
- [constructor 和 super 关键字](#constructor和super关键字)

[vue 部分](#vue部分)

- [vue 组件通信](#vue组件通信)
- [vue 生命周期父子组件执行顺序](#vue生命周期父子组件执行顺序)
- [前端路由](#前端路由)
- [slot 插槽](#slot插槽)
- [keep-alive](#keep-alive)
- [nextTick](#nextTick)
- [mixin](#mixin)
- [vuex](#vuex)

[react 部分](#深拷贝)

- [react 生命周期](#react生命周期)
- [react 数据响应式](#react数据响应式)

[http 部分](#http部分)

- [http 缓存](#http缓存)
- [https 握手](#https握手)
- [http1.1 长连接和 http2 多路复用区别](#http1-1长连接和http2多路复用区别)

[其他](#其他)

- [npm run](#npmRun)
- [cookie 的几种属性和作用](#cookie的几种属性和作用)
- [输入 url 到页面展示经历了什么](#输入url到页面展示经历了什么)
- [懒加载](#懒加载)
- [commonjs 模块和 es6 模块有什么区别](#commonjs模块和es6模块有什么区别)
- [前端优化](#前端优化)
- [常见算法介绍](#常见算法介绍)
- [babel 工作原理](#babel工作原理) --&gt;
&lt;h1 id=&#34;html-和-css&#34;&gt;HTML 和 CSS&lt;/h1&gt;
&lt;h2 id=&#34;bfc&#34;&gt;BFC&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;全称「块格式化上下文」(Block Formatting Context), 是一块独立的 css 作用域，外部如何变化都影响不到他。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vue 中的 diff 算法实现</title>
      <link>http://localhost:1313/blogs/vue%E4%B8%AD%E7%9A%84diff%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 05 Nov 2020 18:36:39 +0800</pubDate>
      <guid>http://localhost:1313/blogs/vue%E4%B8%AD%E7%9A%84diff%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>介绍 React 和 Vue 中虚拟 DOM 替代直接操作 DOM 的原理，详细阐述 diff 算法如何比对新旧虚拟 DOM 实现高效更新</description>
    </item>
    <item>
      <title>Promise 的实现</title>
      <link>http://localhost:1313/blogs/promise-%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Fri, 30 Oct 2020 16:59:53 +0800</pubDate>
      <guid>http://localhost:1313/blogs/promise-%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>实现了一个简易的 Promise 类，并对 Promise.all 和 Promise.race 方法进行了自定义实现</description>
    </item>
    <item>
      <title>基于 Vue 思想的 MVVM 实现</title>
      <link>http://localhost:1313/blogs/vue%E5%8E%9F%E7%90%86mvvm%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 27 Oct 2020 18:46:33 +0800</pubDate>
      <guid>http://localhost:1313/blogs/vue%E5%8E%9F%E7%90%86mvvm%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</guid>
      <description>一个简单的基于 Vue 思想实现的 MVVM 数据架构的代码示例，这里我们将实现一个简单的响应式数据绑定功能</description>
    </item>
    <item>
      <title>使用 jarsigner 重新签名 apk 包</title>
      <link>http://localhost:1313/blogs/%E4%BD%BF%E7%94%A8jarsigner%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8Dapk%E5%8C%85/</link>
      <pubDate>Mon, 26 Oct 2020 16:41:13 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E4%BD%BF%E7%94%A8jarsigner%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8Dapk%E5%8C%85/</guid>
      <description>该文章介绍了在 macOS 10.14 系统下，借助 iTerm 2 工具进行密钥生成与签名操作的步骤</description>
    </item>
    <item>
      <title>函数的防抖和节流</title>
      <link>http://localhost:1313/blogs/%E5%87%BD%E6%95%B0%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</link>
      <pubDate>Tue, 20 Oct 2020 18:02:56 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E5%87%BD%E6%95%B0%E7%9A%84%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</guid>
      <description>&lt;h2 id=&#34;防抖debounce&#34;&gt;防抖（debounce）&lt;/h2&gt;
&lt;h3 id=&#34;什么是防抖&#34;&gt;什么是防抖？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个函数被触发&lt;code&gt;n&lt;/code&gt;秒后，才执行此函数&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;n&lt;/code&gt;秒内再次触发此函数，那么重新以再次触发的时间开始重新延迟 n 秒后执行此函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样的函数 &lt;strong&gt;执行行为&lt;/strong&gt; 叫做函数防抖。&lt;/p&gt;</description>
    </item>
    <item>
      <title>flex 布局介绍</title>
      <link>http://localhost:1313/blogs/flex%E5%B8%83%E5%B1%80/</link>
      <pubDate>Fri, 11 Sep 2020 14:03:49 +0800</pubDate>
      <guid>http://localhost:1313/blogs/flex%E5%B8%83%E5%B1%80/</guid>
      <description>&lt;h2 id=&#34;flex-布局概念&#34;&gt;flex 布局概念&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;flex&lt;/code&gt;布局通常被叫做&lt;code&gt;flex box&lt;/code&gt;，也叫&lt;code&gt;弹性盒子&lt;/code&gt;或&lt;code&gt;容器&lt;/code&gt;，是一种一维的&lt;code&gt;布局模型&lt;/code&gt;，它能子元素(&lt;code&gt;flex item&lt;/code&gt;)之间提供了强大的空间分布和对齐能力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>函数柯里化(currying)</title>
      <link>http://localhost:1313/blogs/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</link>
      <pubDate>Wed, 09 Sep 2020 13:13:04 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</guid>
      <description>文章介绍函数柯里化，说明其将多参函数转为单参函数的概念，以 JavaScript 举例阐述原理，讲解参数复用等好处并给出 ajax 请求示例，还提供了完整实现代码及用法</description>
    </item>
    <item>
      <title>常用4种排序介绍</title>
      <link>http://localhost:1313/blogs/%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 02 Sep 2020 16:07:43 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E5%B8%B8%E7%94%A84%E7%A7%8D%E6%8E%92%E5%BA%8F%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;h2 id=&#34;冒泡排序bubble-sort&#34;&gt;冒泡排序（Bubble sort）&lt;/h2&gt;
&lt;h3 id=&#34;原理和演示&#34;&gt;原理和演示：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;依次比较数组中相邻的每一对值，如果前面的值 &lt;strong&gt;大于&lt;/strong&gt; 后面的值，则交换他们俩的位置。如果数组中&lt;code&gt;5&lt;/code&gt;个数字(length 为 5)，由于比较 &lt;strong&gt;两个一组&lt;/strong&gt; 的数字，那么只需要&lt;code&gt;4次&lt;/code&gt;(length - 1)比较，就可以实现把数组中最大的一个数放到最后。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bubbleSort&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;temp&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`执行&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;次`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arr&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过第一步得到最大的一个数放在数组最后。那么剩下的前三个数继续执行第一步，结果找到第二大的数，放在数组倒数第二位，重复此步骤，直到比对完数组中最后一组数。由于第一步骤每次得到一个最大值放最后，&lt;code&gt;j&lt;/code&gt;对应的正好是数组最后有多少个最大值，可以免去比较。所以上步骤每次循环可以优化一下每次少算一个最大值，每次循环总数&lt;code&gt;- 1&lt;/code&gt;也就是下面例子中的&lt;code&gt;- j&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用 css 实现环状进度</title>
      <link>http://localhost:1313/blogs/%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E7%8E%AF%E7%8A%B6%E8%BF%9B%E5%BA%A6/</link>
      <pubDate>Sat, 22 Aug 2020 09:44:03 +0800</pubDate>
      <guid>http://localhost:1313/blogs/%E4%BD%BF%E7%94%A8css%E5%AE%9E%E7%8E%B0%E7%8E%AF%E7%8A%B6%E8%BF%9B%E5%BA%A6/</guid>
      <description>使用纯 css 实现一个圆环的进度效果，主要使用了&lt;code&gt;background-image&lt;/code&gt;渐变属性和动画状态的&lt;code&gt;伪元素遮盖&lt;/code&gt;来实现</description>
    </item>
    <item>
      <title>Linux 中内存交换空间(swap)的使用</title>
      <link>http://localhost:1313/blogs/linux%E4%B8%AD%E5%86%85%E5%AD%98%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4swap%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 21 Aug 2020 16:48:04 +0800</pubDate>
      <guid>http://localhost:1313/blogs/linux%E4%B8%AD%E5%86%85%E5%AD%98%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4swap%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;hr&gt;
&lt;h2 id=&#34;什么是-swap&#34;&gt;什么是 swap&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;swap 分区&lt;/strong&gt; 是 Linux 中特殊的一种存储，他在安装系统时被自动创建。&lt;/p&gt;
&lt;p&gt;用于当内存不够时，操作系统会取出内存中不活跃或不常用的一部分放到 &lt;strong&gt;swap 分区&lt;/strong&gt; 中，使内存空闲出一部分空间用于执行其他程序。相当于临时充当一部分内存，当操作系统想要访问 swap 空间上的的数据时，swap 会把数据放回内存中供操作系统使用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>照片</title>
      <link>http://localhost:1313/photos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/photos/</guid>
      <description>我的生活切片</description>
    </item>
  </channel>
</rss>
